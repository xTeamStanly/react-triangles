{"version":3,"sources":["Trouglovi.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["canvasWidth","window","innerWidth","canvasHeight","innerHeight","valueToPercent","percent","min","max","clamp","input","Trouglovi","props","triangles","useState","update","setUpdate","config","useRef","topcolor","colorConvertor","hex","hsv","botcolor","topcolorhex","botcolorhex","varH","hue","varS","sat","varV","val","equilateral","triangleCountX","countx","triangleCountY","county","stepX","stepY","showGUI","setShowGUI","eventListen","event","repeat","code","canvas","ctx","generateColor","x","y","maxX","maxY","percentDistanceFromFloor","Math","random","current","canvasRef","useEffect","init","resizeTimer","getContext","addEventListener","clearTimeout","setTimeout","localStorage","getItem","JSON","parse","setItem","stringify","width","height","sqrt","a","b","c","d","red","offset","push","x0","y0","x1","y1","x2","y2","color","generateTriangles","trougao","lineWidth","i","length","fillStyle","strokeStyle","beginPath","moveTo","lineTo","closePath","stroke","fill","drawTriangles","style","position","zIndex","hidden","data","onUpdate","newData","title","closed","path","label","step","ref","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f4b6d4b1.chunk.js","sourcesContent":["import { React, useEffect, useRef, useState } from 'react';\r\nimport colorConvertor from 'color-convert';\r\n\r\nimport eventListen from '@use-it/event-listener';\r\nimport DatGui, { DatColor, DatFolder, DatNumber } from 'react-dat-gui';\r\nimport 'react-dat-gui/dist/index.css';\r\n\r\n//global config\r\nlet canvasWidth = window.innerWidth;\r\nlet canvasHeight = window.innerHeight;\r\n\r\n//helper function\r\nconst valueToPercent = (percent, min, max) => { return min + percent * (max - min); }\r\nconst clamp = (input, min, max) => {\r\n    if(input > max) { return max; }\r\n    if(input < min) { return min; }\r\n    return input;\r\n}\r\n//triangle component\r\nconst Trouglovi = (props) => {\r\n\r\n    let triangles = [];\r\n\r\n    const [update, setUpdate] = useState(false);\r\n\r\n    const config = useRef({\r\n\r\n        //top + bot colors\r\n        topcolor: colorConvertor.hex.hsv((props.topcolor) ? props.topcolor : \"#7fff69\"),\r\n        botcolor: colorConvertor.hex.hsv((props.botcolor) ? props.botcolor : \"#814796\"),\r\n\r\n        topcolorhex: (props.topcolor) ? props.topcolor : \"#7fff69\",\r\n        botcolorhex: (props.botcolor) ? props.botcolor : \"#814796\",\r\n\r\n        //color variation + clamping\r\n        varH: (props.hue) ? clamp(props.hue, 0, 1) : 0.2,\r\n        varS: (props.sat) ? clamp(props.sat, 0, 1) : 0,\r\n        varV: (props.val) ? clamp(props.val, 0, 1) : 0.15,\r\n\r\n        //equilateral triangle forces the count of triangle count Y\r\n        equilateral: (props.equilateral) ? props.equilateral : true,\r\n\r\n        triangleCountX: (!props.countx || props.countx < 0) ? 10 : props.countx,\r\n        triangleCountY: (!props.county || props.county < 0) ? 10 : props.county,\r\n\r\n        stepX: null,\r\n        stepY: null,\r\n\r\n    });\r\n\r\n    /* === GUI === */\r\n    const [showGUI, setShowGUI] = useState(false);\r\n    eventListen('keydown', (event) => {\r\n        if(!event.repeat && event.code === 'Pause') { setShowGUI(!showGUI); }\r\n    });\r\n\r\n    const handleUpdate = (newData) => {\r\n\r\n        newData.topcolor = colorConvertor.hex.hsv(newData.topcolorhex);\r\n        newData.botcolor = colorConvertor.hex.hsv(newData.botcolorhex);\r\n\r\n        config.current = newData;\r\n        localStorage.setItem('config', JSON.stringify(newData));\r\n\r\n        setUpdate(!update);\r\n    }\r\n\r\n    //generate color based on triangle position\r\n    const generateColor = (x, y, maxX, maxY) => {\r\n\r\n        let percentDistanceFromFloor = y / maxY;\r\n        if(percentDistanceFromFloor < 0) { percentDistanceFromFloor = 0; }\r\n        //triangle center coords\r\n        //const triangleCenterX = (ax + bx + cx) / 3;\r\n        //const triangleCenterY = (ay + by + cy) / 3;\r\n        //const percentDistanceFromFloor = triangleCenterY / canvasHeight;\r\n\r\n        //hue saturation lightness\r\n        const hue = valueToPercent(percentDistanceFromFloor + Math.random() * config.current.varH, config.current.topcolor[0], config.current.botcolor[0]);\r\n        const sat = valueToPercent(percentDistanceFromFloor + Math.random() * config.current.varS, config.current.topcolor[1], config.current.botcolor[1]);\r\n\r\n        var varV = percentDistanceFromFloor + Math.random() * config.current.varV;\r\n        if(varV > 1) { varV = 1; }\r\n\r\n        const val = valueToPercent(varV, config.current.topcolor[2], config.current.botcolor[2]);\r\n\r\n        return \"#\" + colorConvertor.hsv.hex(clamp(hue, 0, 360), clamp(sat, 0, 100), clamp(val, 0, 100));\r\n    };\r\n\r\n    //generate triangle points (coordinates)\r\n    const generateTriangles = () => {\r\n\r\n        //optimizovane promenljive\r\n        var a, b, c, d, offset = 0;\r\n        var red;\r\n        for(let x = -config.current.stepX; x <= canvasWidth; x += config.current.stepX) {\r\n            red = 1;\r\n            for(let y = -config.current.stepY; y <= canvasHeight; y += config.current.stepY) {\r\n\r\n                if(red % 2 === 1) { offset = config.current.stepX / 2; }\r\n                //if(Math.floor(y / stepY) % 2 == 1) { offset = stepX / 2; }\r\n\r\n                a = offset + x;       //offset + x\r\n                b = a + config.current.stepX;        //offset + x + stepX\r\n                c = a + config.current.stepX / 2;    //offset + x + stepX / 2\r\n                d = y + config.current.stepY;        //y + stepY\r\n\r\n                //gornji trougao\r\n                triangles.push({\r\n                    x0: a, y0: y,\r\n                    x1: b, y1: y,\r\n                    x2: c, y2: d,\r\n                    color: generateColor(a, y, canvasWidth, canvasHeight)\r\n                });\r\n\r\n                //donji trougao\r\n                triangles.push({\r\n                    x0: c, y0: d,\r\n                    x1: c + config.current.stepX, y1: d,\r\n                    x2: b, y2: y,\r\n                    color: generateColor(a, y, canvasWidth, canvasHeight)\r\n                });\r\n\r\n                offset = 0;\r\n                red++;\r\n            }\r\n        }\r\n    }\r\n\r\n    //draw points to canvas\r\n    const drawTriangles = () => {\r\n\r\n        ctx.lineWidth = 2;\r\n        var trougao;\r\n\r\n        for(let i = 0; i < triangles.length; i++) {\r\n            trougao = triangles[i];\r\n            ctx.fillStyle = trougao.color;\r\n            ctx.strokeStyle = trougao.color;\r\n            ctx.beginPath();\r\n            ctx.moveTo(trougao.x0, trougao.y0);\r\n            ctx.lineTo(trougao.x1, trougao.y1);\r\n            ctx.lineTo(trougao.x2, trougao.y2);\r\n            ctx.closePath();\r\n            ctx.stroke();\r\n            ctx.fill();\r\n        }\r\n    }\r\n\r\n    //canvas\r\n    let canvasRef = useRef();\r\n    let canvas;\r\n    let ctx;\r\n\r\n    useEffect(() => {init()}, [showGUI, update]);\r\n\r\n    //startup + resize event\r\n    useEffect(() => {\r\n\r\n        //get the canvas element\r\n        canvas = canvasRef.current;\r\n        ctx = canvas.getContext('2d');\r\n\r\n        //first init\r\n        init();\r\n\r\n        //resize detection\r\n        var resizeTimer;\r\n        window.addEventListener('resize', () => {\r\n            if(resizeTimer) { clearTimeout(resizeTimer); }\r\n            resizeTimer = setTimeout(() => {\r\n                init(); //init on resize\r\n            }, 100);\r\n        });\r\n\r\n    }, []);\r\n\r\n    //initialisation\r\n    const init = () => {\r\n\r\n        //startup load config\r\n        if(localStorage.getItem('config') !== null) {\r\n            config.current = JSON.parse(localStorage.getItem('config'));\r\n        } else {\r\n            localStorage.setItem('config', JSON.stringify(config.current));\r\n        }\r\n\r\n        //get the canvas element\r\n        canvas = canvasRef.current;\r\n        ctx = canvas.getContext('2d');\r\n\r\n        //canvas size\r\n        canvasWidth = window.innerWidth;\r\n        canvasHeight = window.innerHeight;\r\n        ctx.canvas.width = canvasWidth;\r\n        ctx.canvas.height = canvasHeight;\r\n\r\n        //step calculation + equilateral\r\n        if(config.current.equilateral) {\r\n            //equilateral forces Y, vertical triangle count\r\n            config.current.stepY = canvasHeight / config.current.triangleCountY;\r\n            config.current.stepX = config.current.stepY * 2 * Math.sqrt(3) / 3;\r\n        } else {\r\n            //forces both triangles count (streched triangles)\r\n            config.current.stepX = canvasWidth / config.current.triangleCountX;\r\n            config.current.stepY = canvasHeight / config.current.triangleCountY;\r\n        }\r\n\r\n        triangles = [];\r\n        generateTriangles();\r\n        drawTriangles();\r\n    }\r\n\r\n    return(\r\n        <div style = {{\r\n            position: 'absolute',\r\n            zIndex: -1,\r\n            width: \"100%\",\r\n            height: \"100%\"\r\n        }}>\r\n            <div hidden={!showGUI}>\r\n                <DatGui data={config.current} onUpdate={handleUpdate} >\r\n\r\n                    <DatFolder title='Colors' closed={false}>\r\n                        <DatColor path='topcolorhex' label='Top Color' />\r\n                        <DatColor path='botcolorhex' label='Bottom Color' />\r\n                    </DatFolder>\r\n\r\n\r\n                    <DatFolder title='Variations' closed={false}>\r\n                        <DatNumber path='varH' label='Hue Variation' min={0} max={1} step={0.01} />\r\n                        <DatNumber path='varS' label='Saturation Variation' min={0} max={1} step={0.01} />\r\n                        <DatNumber path='varV' label='Value Variation' min={0} max={1} step={0.01} />\r\n                    </DatFolder>\r\n\r\n                    <DatNumber path='triangleCountY' label='Row Count' min={1} max={64} />\r\n                </DatGui>\r\n            </div>\r\n\r\n            <canvas\r\n                ref = { canvasRef }\r\n                style = {{\r\n                    position: 'absolute',\r\n                    zIndex: -1,\r\n                    width: \"100%\",\r\n                    height: \"100%\"\r\n                }}\r\n\r\n                width = { canvasWidth }\r\n                height = { canvasHeight }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Trouglovi;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Trouglovi from './Trouglovi';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <Trouglovi\r\n\r\n    //top and bot colors\r\n    botcolor = { \"#221A33\" }\r\n    topcolor = { \"#8A3D99\" }\r\n\r\n    //color variations\r\n    hue = { 0.2 } //hue variation\r\n    sat = { 0 } //saturation variation\r\n    val = { 0.15 } //value variation\r\n\r\n    //triangle count\r\n    countx = { 10 }\r\n    county = { 10 }\r\n\r\n    //equilateral - if true ignores 'countx', and forces 'county'\r\n    equilateral = { true }\r\n\r\n  />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\nserviceWorkerRegistration.register();"],"sourceRoot":""}