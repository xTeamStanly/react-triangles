{"version":3,"sources":["Trouglovi.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["canvasWidth","window","innerWidth","canvasHeight","innerHeight","valueToPercent","percent","min","max","clamp","input","Trouglovi","props","stepX","stepY","canvas","ctx","topColor","colorConvertor","hex","hsv","topcolor","topHue","topSat","topVal","botColor","botcolor","botHue","botSat","botVal","varijacijaH","hue","varijacijaS","sat","varijacijaV","val","triangles","equilateral","triangleCountX","countx","triangleCountY","county","generateColor","x","y","maxX","maxY","percentDistanceFromFloor","Math","random","varV","canvasRef","useRef","useEffect","resizeTimer","current","getContext","init","addEventListener","clearTimeout","setTimeout","width","height","sqrt","a","b","c","d","red","offset","push","x0","y0","x1","y1","x2","y2","color","generateTriangles","trougao","lineWidth","i","length","fillStyle","strokeStyle","beginPath","moveTo","lineTo","closePath","stroke","fill","drawTriangles","style","position","zIndex","ref","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.ce1e13be.chunk.js","sourcesContent":["import { React, useEffect, useRef } from 'react';\r\nimport colorConvertor from 'color-convert';\r\n\r\n//global config\r\nlet canvasWidth = window.innerWidth;\r\nlet canvasHeight = window.innerHeight;\r\n\r\n//helper function\r\nconst valueToPercent = (percent, min, max) => { return min + percent * (max - min); }\r\nconst clamp = (input, min, max) => {\r\n    if(input > max) { return max; }\r\n    if(input < min) { return min; }\r\n    return input;\r\n}\r\n//triangle component\r\nconst Trouglovi = (props) => {\r\n\r\n    //TOP COLOR\r\n    let topColor = colorConvertor.hex.hsv((props.topcolor) ? props.topcolor : \"#7fff69\");\r\n    let topHue = topColor[0];\r\n    let topSat = topColor[1];\r\n    let topVal = topColor[2];\r\n\r\n    //BOT COLOR\r\n    let botColor = colorConvertor.hex.hsv((props.botcolor) ? props.botcolor : \"#814796\");\r\n    let botHue = botColor[0];\r\n    let botSat = botColor[1];\r\n    let botVal = botColor[2];\r\n\r\n    //COLOR VARIATION + clamping\r\n    let varijacijaH = (props.hue) ? clamp(props.hue, 0, 1) : 0.2;\r\n    let varijacijaS = (props.sat) ? clamp(props.sat, 0, 1) : 0;\r\n    let varijacijaV = (props.val) ? clamp(props.val, 0, 1) : 0.15;\r\n\r\n    let triangles = [];\r\n\r\n    //equilateral triangle forces the count of triangle count Y\r\n    let equilateral = (props.equilateral) ? props.equilateral : true;\r\n\r\n    let triangleCountX = (!props.countx || props.countx < 0) ? 10 : props.countx;\r\n    let triangleCountY = (!props.county || props.county < 0) ? 10 : props.county;\r\n\r\n    let stepX; let stepY;\r\n\r\n    //generate color based on triangle position\r\n    const generateColor = (x, y, maxX, maxY) => {\r\n\r\n        let percentDistanceFromFloor = y / maxY;\r\n        if(percentDistanceFromFloor < 0) { percentDistanceFromFloor = 0; }\r\n        //triangle center coords\r\n        //const triangleCenterX = (ax + bx + cx) / 3;\r\n        //const triangleCenterY = (ay + by + cy) / 3;\r\n        //const percentDistanceFromFloor = triangleCenterY / canvasHeight;\r\n\r\n        //hue saturation lightness\r\n        const hue = valueToPercent(percentDistanceFromFloor + Math.random() * varijacijaH, topHue, botHue);\r\n        const sat = valueToPercent(percentDistanceFromFloor + Math.random() * varijacijaS, topSat, botSat);\r\n\r\n        var varV = percentDistanceFromFloor + Math.random() * varijacijaV;\r\n        if(varV > 1) { varV = 1; }\r\n\r\n        const val = valueToPercent(varV, topVal, botVal);\r\n\r\n        return \"#\" + colorConvertor.hsv.hex(clamp(hue, 0, 360), clamp(sat, 0, 100), clamp(val, 0, 100));\r\n    };\r\n\r\n    //generate triangle points (coordinates)\r\n    const generateTriangles = () => {\r\n\r\n        //optimizovane promenljive\r\n        var a, b, c, d, offset = 0;\r\n        var red;\r\n        for(let x = -stepX; x <= canvasWidth; x += stepX) {\r\n            red = 1;\r\n            for(let y = -stepY; y <= canvasHeight; y += stepY) {\r\n\r\n                if(red % 2 === 1) { offset = stepX / 2; }\r\n                //if(Math.floor(y / stepY) % 2 == 1) { offset = stepX / 2; }\r\n\r\n                a = offset + x;       //offset + x\r\n                b = a + stepX;        //offset + x + stepX\r\n                c = a + stepX / 2;    //offset + x + stepX / 2\r\n                d = y + stepY;        //y + stepY\r\n\r\n                //gornji trougao\r\n                triangles.push({\r\n                    x0: a, y0: y,\r\n                    x1: b, y1: y,\r\n                    x2: c, y2: d,\r\n                    color: generateColor(a, y, canvasWidth, canvasHeight)\r\n                });\r\n\r\n                //donji trougao\r\n                triangles.push({\r\n                    x0: c, y0: d,\r\n                    x1: c + stepX, y1: d,\r\n                    x2: b, y2: y,\r\n                    color: generateColor(a, y, canvasWidth, canvasHeight)\r\n                });\r\n\r\n                offset = 0;\r\n                red++;\r\n            }\r\n        }\r\n    }\r\n\r\n    //draw points to canvas\r\n    const drawTriangles = () => {\r\n\r\n        ctx.lineWidth = 2;\r\n        var trougao;\r\n\r\n        for(let i = 0; i < triangles.length; i++) {\r\n            trougao = triangles[i];\r\n            ctx.fillStyle = trougao.color;\r\n            ctx.strokeStyle = trougao.color;\r\n            ctx.beginPath();\r\n            ctx.moveTo(trougao.x0, trougao.y0);\r\n            ctx.lineTo(trougao.x1, trougao.y1);\r\n            ctx.lineTo(trougao.x2, trougao.y2);\r\n            ctx.closePath();\r\n            ctx.stroke();\r\n            ctx.fill();\r\n        }\r\n    }\r\n\r\n    //canvas\r\n    let canvasRef = useRef();\r\n    let canvas;\r\n    let ctx;\r\n\r\n    //startup + resize event\r\n    useEffect(() => {\r\n\r\n        //get the canvas element\r\n        canvas = canvasRef.current;\r\n        ctx = canvas.getContext('2d');\r\n\r\n        //first init\r\n        init();\r\n\r\n        //resize detection\r\n        var resizeTimer;\r\n        window.addEventListener('resize', () => {\r\n            if(resizeTimer) { clearTimeout(resizeTimer); }\r\n            resizeTimer = setTimeout(() => {\r\n                init(); //init on resize\r\n            }, 100);\r\n        });\r\n\r\n    }, []);\r\n\r\n    //initialisation\r\n    const init = () => {\r\n\r\n        //canvas size\r\n        canvasWidth = window.innerWidth;\r\n        canvasHeight = window.innerHeight;\r\n        ctx.canvas.width = canvasWidth;\r\n        ctx.canvas.height = canvasHeight;\r\n\r\n        //step calculation + equilateral\r\n        if(equilateral) {\r\n            //equilateral forces Y, vertical triangle count\r\n            stepY = canvasHeight / triangleCountY;\r\n            stepX = stepY * 2 * Math.sqrt(3) / 3;\r\n        } else {\r\n            //forces both triangles count (streched triangles)\r\n            stepX = canvasWidth / triangleCountX;\r\n            stepY = canvasHeight / triangleCountY;\r\n        }\r\n\r\n        triangles = [];\r\n        generateTriangles();\r\n        drawTriangles();\r\n    }\r\n\r\n    return(\r\n        <div style = {{\r\n            position: 'absolute',\r\n            zIndex: -1,\r\n            width: \"100%\",\r\n            height: \"100%\"\r\n        }}>\r\n            <canvas\r\n                ref = { canvasRef }\r\n                style = {{\r\n                    position: 'absolute',\r\n                    zIndex: -1,\r\n                    width: \"100%\",\r\n                    height: \"100%\"\r\n                }}\r\n\r\n                width = { canvasWidth }\r\n                height = { canvasHeight }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Trouglovi;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Trouglovi from './Trouglovi';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Trouglovi\n\n    //top and bot colors\n    botcolor = { \"#221A33\" }\n    topcolor = { \"#8A3D99\" }\n\n    //color variations\n    hue = { 0.2 } //hue variation\n    sat = { 0 } //saturation variation\n    val = { 0.15 } //value variation\n\n    //triangle count\n    countx = { 10 }\n    county = { 10 }\n\n    //equilateral - if true ignores 'countx', and forces 'county'\n    equilateral = { true }\n\n  />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nserviceWorkerRegistration.register();"],"sourceRoot":""}