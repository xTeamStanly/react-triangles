{"version":3,"sources":["Trouglovi.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["canvasWidth","window","innerHeight","canvasHeight","valueToPercent","percent","min","max","Trouglovi","props","topColor","colorConvertor","hex","hsv","topcolor","topHue","topSat","topVal","botColor","botcolor","botHue","botSat","botVal","varijacijaH","varijacijaS","varijacijaV","canvas","ctx","triangles","stepX","stepY","generateColor","x","y","maxX","maxY","percentDistanceFromFloor","hue","Math","random","sat","varV","val","canvasRef","useRef","handleResize","init","useEffect","resizeTimer","current","getContext","addEventListener","clearTimeout","setTimeout","innerWidth","a","b","c","d","red","offset","push","x0","y0","x1","y1","x2","y2","color","generateTriangles","trougao","clearRect","lineWidth","i","length","fillStyle","strokeStyle","beginPath","moveTo","lineTo","closePath","stroke","fill","console","log","drawTriangles","fillRect","style","position","zIndex","width","height","ref","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.b122feee.chunk.js","sourcesContent":["import { React, useEffect, useRef } from 'react';\r\nimport colorConvertor from 'color-convert';\r\n\r\n//global config\r\nlet canvasWidth = window.innerHeight;\r\nlet canvasHeight = window.innerHeight;\r\n\r\n//pomocne funkcije\r\nconst valueToPercent = (percent, min, max) => { return min + percent * (max - min); }\r\n\r\nconst generateColorVariant = (hexcolor, tint, shade) => {\r\n    //https://github.com/edelstone/tints-and-shades\r\n    const rgb = colorConvertor.hex.rgb(hexcolor);\r\n    let r = rgb[0]; r = r + ((255 - r) * tint); r = r * shade;\r\n    let g = rgb[1]; g = g + ((255 - g) * tint); g = g * shade;\r\n    let b = rgb[2]; b = b + ((255 - b) * tint); b = b * shade;\r\n    return \"#\" + colorConvertor.rgb.hex(r, g, b);\r\n}\r\n\r\n//glavna komponenta\r\nconst Trouglovi = (props) => {\r\n\r\n    //#region\r\n    //TOP COLOR\r\n    let topColor = colorConvertor.hex.hsv((props.topcolor) ? props.topcolor : \"#7fff69\");\r\n    let topHue = topColor[0];\r\n    let topSat = topColor[1];\r\n    let topVal = topColor[2];\r\n\r\n    //BOT COLOR\r\n    let botColor = colorConvertor.hex.hsv((props.botcolor) ? props.botcolor : \"#814796\");\r\n    let botHue = botColor[0];\r\n    let botSat = botColor[1];\r\n    let botVal = botColor[2];\r\n\r\n    // let varijacijaH = 5;\r\n    // let varijacijaS = 0;\r\n    // let varijacijaL = 10;\r\n\r\n    //COLOR VARIATION\r\n    let varijacijaH = 0.2; if(varijacijaH > 1) { varijacijaH = 1; } if(varijacijaH < 0) { varijacijaH = 0; }\r\n    let varijacijaS = 0; if(varijacijaS > 1) { varijacijaS = 1; } if(varijacijaS < 0) { varijacijaS = 0; }\r\n    let varijacijaV = 0.15; if(varijacijaV > 1) { varijacijaV = 1; } if(varijacijaV < 0) { varijacijaV = 0; }\r\n    //#endregion\r\n\r\n    let triangles = [];\r\n\r\n    let triangleCountX = 5;\r\n    let triangleCountY = 5;\r\n\r\n    let stepX = canvasWidth / triangleCountX;\r\n    let stepY = canvasHeight / triangleCountY;// stepX * (Math.sqrt(3) / 2); //visina jednakostranicnog trougla\r\n\r\n\r\n    const generateColor = (x, y, maxX, maxY) => {\r\n\r\n        let percentDistanceFromFloor = y / maxY;\r\n        if(percentDistanceFromFloor < 0) { percentDistanceFromFloor = 0; }\r\n        //triangle center coords\r\n        //const triangleCenterX = (ax + bx + cx) / 3;\r\n        //const triangleCenterY = (ay + by + cy) / 3;\r\n        //const percentDistanceFromFloor = triangleCenterY / canvasHeight;\r\n\r\n        //hue saturation lightness\r\n        const hue = valueToPercent(percentDistanceFromFloor + Math.random() * varijacijaH, topHue, botHue);\r\n        const sat = valueToPercent(percentDistanceFromFloor + Math.random() * varijacijaS, topSat, botSat);\r\n\r\n        var varV = percentDistanceFromFloor + Math.random() * varijacijaV;\r\n        if(varV > 1) { varV = 1; }\r\n\r\n        const val = valueToPercent(varV, topVal, botVal);\r\n\r\n        return \"#\" + colorConvertor.hsv.hex(hue, sat, val);\r\n    };\r\n\r\n    //generisi tacke trouglova (koordinate)\r\n    const generateTriangles = () => {\r\n\r\n        triangles = [];\r\n\r\n        //optimizovane promenljive\r\n        var a, b, c, d, offset = 0;\r\n        var red;\r\n        for(let x = -stepX; x <= canvasWidth; x += stepX) {\r\n            red = 1;\r\n            for(let y = -stepY; y <= canvasHeight; y += stepY) {\r\n\r\n                if(red % 2 === 1) { offset = stepX / 2; }\r\n                //if(Math.floor(y / stepY) % 2 == 1) { offset = stepX / 2; }\r\n\r\n                a = offset + x;       //offset + x\r\n                b = a + stepX;        //offset + x + stepX\r\n                c = a + stepX / 2;    //offset + x + stepX / 2\r\n                d = y + stepY;        //y + stepY\r\n\r\n                //gornji trougao\r\n                triangles.push({\r\n                    x0: a, y0: y,\r\n                    x1: b, y1: y,\r\n                    x2: c, y2: d,\r\n                    color: generateColor(a, y, canvasWidth, canvasHeight)\r\n                });\r\n\r\n                //donji trougao\r\n                triangles.push({\r\n                    x0: c, y0: d,\r\n                    x1: c + stepX, y1: d,\r\n                    x2: b, y2: y,\r\n                    color: generateColor(a, y, canvasWidth, canvasHeight)\r\n                });\r\n\r\n                offset = 0;\r\n                red++;\r\n            }\r\n        }\r\n    }\r\n\r\n    //nacrtaj trouglove na canvas\r\n    const drawTriangles = () => {\r\n\r\n        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n\r\n        ctx.lineWidth = 2;\r\n        var trougao;\r\n\r\n        for(let i = 0; i < triangles.length; i++) {\r\n            trougao = triangles[i];\r\n            ctx.fillStyle = trougao.color;\r\n            ctx.strokeStyle = trougao.color;\r\n            ctx.beginPath();\r\n            ctx.moveTo(trougao.x0, trougao.y0);\r\n            ctx.lineTo(trougao.x1, trougao.y1);\r\n            ctx.lineTo(trougao.x2, trougao.y2);\r\n            ctx.closePath();\r\n            ctx.stroke();\r\n            ctx.fill();\r\n\r\n            console.log(i);\r\n        }\r\n    }\r\n\r\n\r\n    //canvas\r\n    let canvasRef = useRef();\r\n    let canvas;\r\n    let ctx;\r\n\r\n    const handleResize = () => {\r\n        // canvas = canvasRef.current;\r\n        // ctx = canvas.getContext('2d');\r\n        init();\r\n    };\r\n\r\n    useEffect(() => {\r\n        canvas = canvasRef.current;\r\n        ctx = canvas.getContext('2d');\r\n        init();\r\n\r\n        var resizeTimer;\r\n        window.addEventListener('resize', () => {\r\n            if(resizeTimer) { clearTimeout(resizeTimer); }\r\n            resizeTimer = setTimeout(handleResize, 100);\r\n        });\r\n\r\n    }, []);\r\n\r\n    const init = () => {\r\n        //ctx.clearRect(0, 0, canvasHeight, canvasWidth);\r\n        canvasWidth = window.innerWidth;\r\n        canvasHeight = window.innerHeight;\r\n\r\n        stepX = (canvasWidth / triangleCountX);\r\n        stepY = canvasHeight / triangleCountY;// stepX * (Math.sqrt(3) / 2); //visina jednakostranicnog trougla\r\n\r\n        //if(stepX < stepY) { stepY = [stepX, stepX = stepY][0]; } //swap\r\n\r\n        generateTriangles();\r\n        drawTriangles();\r\n\r\n        ctx.fillStyle = \"#00FF000F\";\r\n        ctx.fillRect(0, 0, window.innerWidth, window.innerHeight);\r\n\r\n        console.log(`CANVAS: ${canvasWidth} ${canvasHeight}`);\r\n        console.log(`WINDOWS: ${window.innerWidth} ${window.innerHeight}`);\r\n        console.log(`STEP: ${stepX} ${stepY}`);\r\n    }\r\n\r\n    return(\r\n        <div style = {{\r\n            position: 'absolute',\r\n            zIndex: -1,\r\n            width: \"100%\",\r\n            height: \"100%\"\r\n        }}>\r\n            <canvas\r\n                ref = { canvasRef }\r\n                style = {{\r\n                    position: 'absolute',\r\n                    zIndex: -1,\r\n                    width: \"100%\",\r\n                    height: \"100%\"\r\n                }}\r\n\r\n                width = { window.innerWidth }\r\n                height = { window.innerHeight }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Trouglovi;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Trouglovi from './Trouglovi';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Trouglovi\n\n    //glavne boje\n    botcolor = { \"#221A33\" }\n    topcolor = { \"#8A3D99\" }\n\n  />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nserviceWorkerRegistration.register();"],"sourceRoot":""}